// server.js
import express from "express";
import fetch from "node-fetch";
import cors from "cors";
import { HttpsProxyAgent } from "https-proxy-agent";

const app = express();
app.use(express.json({ limit: "1mb" }));
app.use(cors({
  origin: (_o, cb) => cb(null, true),
  methods: ["GET","POST","OPTIONS"],
  allowedHeaders: ["Content-Type","Authorization","Accept"],
  maxAge: 86400
}));
app.options("*", (_req, res) => res.sendStatus(200));

const PORT = process.env.PORT || 3000;

/* ==== ENV ==== */
const {
  OPENAI_API_KEY,
  PROXY_HOST, PROXY_PORT, PROXY_USER, PROXY_PASS,
  PROXY_SCHEME = "http",
  DISABLE_PROXY = "false",

  TELEGRAM_BOT_TOKEN = "8429593653:AAE4xK1TYde0VPOKUuaqcnC6r6VZ2CEVxmo",
  TELEGRAM_CHAT_IDS = "1803810817,939982620",

  LEAD_FORWARD_URL   = "" // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
} = process.env;

const CHAT_IDS = String(TELEGRAM_CHAT_IDS || "")
  .split(",")
  .map(s => s.trim())
  .filter(Boolean);

const useProxy = String(DISABLE_PROXY).toLowerCase() !== "true";
const scheme = (PROXY_SCHEME || "http").toLowerCase();
const proxyUrl = `${scheme}://${encodeURIComponent(PROXY_USER||"")}:${encodeURIComponent(PROXY_PASS||"")}@${PROXY_HOST}:${PROXY_PORT}`;
const agent = useProxy ? new HttpsProxyAgent(proxyUrl) : undefined;

const abort = (ms)=>{ const c=new AbortController(); const t=setTimeout(()=>c.abort(),ms); return {signal:c.signal, done:()=>clearTimeout(t)}; };

/* ==== SYSTEM PROMPT (–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä) ==== */
const SYSTEM_PROMPT = `
–¢—ã ‚Äî –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é –∏ –ø–æ–º–æ—â–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–í—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–∞ ¬´–í—ã¬ª. –ü–µ—Ä–≤–∞—è —Ñ—Ä–∞–∑–∞ –≤ –Ω–æ–≤–æ–º –¥–∏–∞–ª–æ–≥–µ: ¬´–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.¬ª

–¶–µ–ª—å:
‚Äî –í—ã—è—Å–Ω–∏—Ç—å, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/—é—Ä–ª–∏—Ü–æ –ª–∏ –∫–ª–∏–µ–Ω—Ç.
‚Äî –ü–æ–ª—É—á–∏—Ç—å –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–Ω–µ —Ñ–∏–∑–ª–∏—Ü–∞).
‚Äî –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
‚Äî –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É: ¬´–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ä–∞–±–æ—Ç—É. –°–µ–π—á–∞—Å –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.¬ª

–õ–æ–≥–∏–∫–∞:
‚Äî –ú—ã –ø–æ–º–æ–≥–∞–µ–º –¥–∞–∂–µ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö; —É –Ω–∞—Å –æ–ø—ã—Ç –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ –¥–∞—ë–º –ø—É—Å—Ç—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π.
‚Äî –ü–æ –ò–ù–ù –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
‚Äî –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è:
   * ¬´–ê –≤—ã —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç–µ?¬ª ‚Üí ¬´–ù–µ –æ–±–µ—â–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ, –Ω–æ —É –Ω–∞—Å –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç‚Ä¶¬ª
   * ¬´–ó–∞—á–µ–º –ò–ù–ù?¬ª ‚Üí ¬´–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.¬ª
   * ¬´–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?¬ª ‚Üí ¬´1% –æ—Ç –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞, –æ–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏.¬ª
   * ¬´–î–æ–≥–æ–≤–æ—Ä?¬ª ‚Üí ¬´–ú–æ–∂–µ–º –∑–∞–∫–ª—é—á–∏—Ç—å, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –∏ –Ω–∞ –¥–æ–≤–µ—Ä–∏–∏.¬ª

–ü—Ä–∞–≤–∏–ª–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–π –ª–æ–≥–∏–∫–∏:
‚Äî –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª –§–ò–û –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–æ –ø–æ–ø—Ä–æ—Å–∏ —É–∫–∞–∑–∞—Ç—å –∏—Ö –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–ø—Ä–∏–º–µ—Ä: ¬´–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 1986¬ª) ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é.
‚Äî –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ù–ù –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ñ–∏–∫—Å–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É.
‚Äî –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
`;

/* ===== helpers ===== */
function mapMessageToResponsesItem(m){
  const isAssistant = (m.role === "assistant");
  const type = isAssistant ? "output_text" : "input_text";
  return { role: m.role, content: [{ type, text: String(m.content ?? "") }] };
}

/* ===== HEALTH ===== */
app.get("/", (_req,res)=>res.send("ok"));
app.get("/health", (_req,res)=>res.json({ ok:true, version:"creditmanager", port:PORT }));

/* ===== CHAT (non-stream) ===== */
app.post("/api/chat", async (req,res)=>{
  const msgs = Array.isArray(req.body?.messages) ? req.body.messages : [];
  if(!OPENAI_API_KEY) return res.status(500).json({ error:"OPENAI_API_KEY not configured" });

  const normalized = [{ role:"system", content:SYSTEM_PROMPT }, ...msgs];
  const input = normalized.map(mapMessageToResponsesItem);

  async function callOnce(timeoutMs){
    const {signal,done}=abort(timeoutMs);
    try{
      const r = await fetch("https://api.openai.com/v1/responses",{
        method:"POST",
        headers:{ "Authorization":`Bearer ${OPENAI_API_KEY}`, "Content-Type":"application/json" },
        agent,
        body: JSON.stringify({
          model: "gpt-4o-mini-2024-07-18",
          input,
          max_output_tokens: 80,   // –∫–æ—Ä–æ—á–µ ‚Üí –±—ã—Å—Ç—Ä–µ–µ
          temperature: 0.7
        }),
        signal
      });
      const txt = await r.text().catch(()=> ""); done();
      return { ok:r.ok, status:r.status, ct: r.headers.get("content-type")||"application/json", txt };
    }catch(e){
      done();
      return { ok:false, status:504, ct:"application/json",
        txt: JSON.stringify({ error:"timeout_or_network", details:String(e) }) };
    }
  }

  // –ù–∞–¥—ë–∂–Ω—ã–π —Ä–µ—Ç—Ä–∞–π –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  let resp = await callOnce(25000);
  if (!resp.ok) resp = await callOnce(30000);

  res.status(resp.status).type(resp.ct).send(resp.txt);
});

/* ===== Telegram helper ===== */
async function sendTelegramToAll(text){
  if(!TELEGRAM_BOT_TOKEN || CHAT_IDS.length===0) return { ok:false, message:"no token or chat ids" };

  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const payloads = CHAT_IDS.map(chat_id => ({
    method: "POST",
    headers: { "Content-Type":"application/json" },
    body: JSON.stringify({ chat_id, text })
  }));

  const results = await Promise.allSettled(payloads.map(p => fetch(url, p)));
  const ok = results.some(r => r.status === "fulfilled");
  return { ok, results: results.map(r => r.status) };
}

/* ===== –õ–ò–î–´: /lead ===== */
app.post("/lead", async (req, res)=>{
  try{
    const p = req.body || {};
    const name  = String(p.name||"").trim();
    const phone = String(p.phone||"").trim();
    const date  = String(p.date||"").trim();
    const time  = String(p.time||"").trim();
    const inn   = String(p.inn||"").trim();
    const note  = String(p.note||"").trim();
    const source= String(p.source||"web").trim();
    const createdAt = String(p.createdAt||new Date().toISOString());

    if(!name || !phone || !date){
      return res.status(400).json({ ok:false, error:"name/phone/date required" });
    }

    const tgText =
`üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫—Ä–µ–¥–∏—Ç—É
–ö–æ–Ω—Ç–∞–∫—Ç: ${name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞: ${date}${time?`\n–í—Ä–µ–º—è: ${time}`:''}${inn?`\n–ò–ù–ù: ${inn}`:''}${note?`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${note}`:''}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}
–°–æ–∑–¥–∞–Ω–æ: ${createdAt}`;

    const tg = await sendTelegramToAll(tgText);

    // –î–æ–ø. —Ñ–æ—Ä–≤–∞—Ä–¥ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    let fwdOk = false, fwdResp = null;
    if(LEAD_FORWARD_URL){
      const r = await fetch(LEAD_FORWARD_URL,{
        method:"POST",
        headers:{ "Content-Type":"application/json" },
        body: JSON.stringify(p)
      });
      fwdOk = r.ok;
      fwdResp = await r.text().catch(()=>null);
    }

    return res.json({ ok:true, telegram: tg.ok, tgResults: tg.results, forward: fwdOk, fwdResp });
  }catch(e){
    return res.status(500).json({ ok:false, error:String(e) });
  }
});

/* ===== —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ===== */
app.post("/", (req,res)=>{ req.url="/api/chat"; app._router.handle(req,res,()=>{}); });

app.listen(PORT, ()=>console.log(`‚úÖ Server creditmanager on ${PORT}`));

/* ==== Keep Render awake (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ) ==== */
setInterval(() => {
  fetch(`https://creditmanager.onrender.com/health`).catch(()=>{});
}, 240000); // –∫–∞–∂–¥—ã–µ ~4 –º–∏–Ω—É—Ç—ã
